// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  orders        Orders[]
  reviews       Reviews[]
  wishlist      Wishlist[]
  // Optional for WebAuthn support
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Orders {
  orderId        Int        @id @default(autoincrement())
  userId         String
  price_paid     Float
  payment_method String
  order_status   String     @default("Pending")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  products       Products[]

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model Categories {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  products  Products[]
}

model Tags {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  products  Products[]
}

model Specifications {
  id        Int      @id @default(autoincrement())
  info      String[]
  spec      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products   Products? @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId Int?
}

model Images {
  id        Int      @id @default(autoincrement())
  alt       String
  src       String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products   Products? @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId Int?
}

model Reviews {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  products   Products? @relation(fields: [productsId], references: [id])
  productsId Int?
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  products   Products? @relation(fields: [productsId], references: [id])
  productsId Int?
}

model Products {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String
  description     String
  specifications  Specifications[]
  categories      Categories[]
  tags            Tags[]
  images          Images[]
  orders          Orders[]
  reviews         Reviews[]
  wishlist        Wishlist[]
  price           String           @default("0.00")
  sale_price      String?
  purchase_note   String?
  visible         Boolean          @default(true)
  purchasable     Boolean          @default(true)
  reviews_allowed Boolean          @default(true)
  featured        Boolean          @default(false)
  stock_quantity  Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}
